<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Liar's Dice Calculator</title>
    <style>
        body { font-family: -apple-system, sans-serif; padding: 20px; }
        input, button { padding: 10px; margin: 5px 0; width: 100%; }
        .result { margin-top: 20px; font-weight: bold; }
        .error { color: red; }
    </style>
</head>
<body>
    <h2>üé≤ Liar's Dice Probability</h2>

    <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:</label>
    <input type="number" id="players" min="2" value="3">

    <label>–í–∞—à–∏ –∫—É–±–∏–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —á–∏—Å–ª–∞ 1-6):</label>
    <input type="text" id="dice" placeholder="1 2 3 4 5" value="1 2 1 3 2">

    <label>–ó–∞—è–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "5 5" - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ):</label>
    <input type="text" id="claim" placeholder="4 2" value="4 2">

    <button onclick="calculate()">–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>

    <div id="error" class="error"></div>
    <div id="result" class="result"></div>

    <script>
        function calculate() {
            try {
                // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                document.getElementById('error').textContent = '';
                document.getElementById('result').textContent = '';
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
                const numPlayers = parseInt(document.getElementById('players').value);
                if (isNaN(numPlayers)) throw new Error("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤");
                if (numPlayers < 2) throw new Error("–ú–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞");
                
                const diceInput = document.getElementById('dice').value.trim();
                if (!diceInput) throw new Error("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫—É–±–∏–∫–∏");
                
                const myDice = diceInput.split(/\s+/).map(Number);
                if (myDice.length !== 5 || myDice.some(isNaN) || myDice.some(d => d < 1 || d > 6)) {
                    throw new Error("–í–≤–µ–¥–∏—Ç–µ 5 –∫—É–±–∏–∫–æ–≤ (—á–∏—Å–ª–∞ 1-6)");
                }
                
                const claimInput = document.getElementById('claim').value.trim();
                if (!claimInput) throw new Error("–í–≤–µ–¥–∏—Ç–µ –∑–∞—è–≤–∫—É");
                
                const claim = claimInput.split(/\s+/).map(Number);
                if (claim.length !== 2 || claim.some(isNaN) || claim[1] < 1 || claim[1] > 6) {
                    throw new Error("–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ' (–∑–Ω–∞—á–µ–Ω–∏–µ 1-6)");
                }

                // –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                const [prob, counted] = calcProbability(numPlayers, myDice, claim);

                // –í—ã–≤–æ–¥
                let result = `–£ –≤–∞—Å: ${counted} ${claim[1]} (—Ä–µ–∞–ª—å–Ω—ã–µ + wildcard)<br>`;
                result += `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ${claim[0]}+ ${claim[1]}: <b>${(prob * 100).toFixed(2)}%</b>`;

                if (prob >= 0.999) result += "<br>üî¥ –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ!";
                else if (prob <= 0.01) result += "<br>üü¢ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–ª–µ—Ñ!";

                document.getElementById('result').innerHTML = result;
            } catch (error) {
                document.getElementById('error').textContent = error.message;
            }
        }

        function calcProbability(numPlayers, myDice, claim) {
            const [claimedNum, claimedValue] = claim;
            const totalDice = numPlayers * 5;
            const unknownDice = totalDice - 5;

            const myReal = myDice.filter(d => d === claimedValue).length;
            const myWild = claimedValue !== 1 ? myDice.filter(d => d === 1).length : 0;
            const myCount = myReal + myWild;

            const needed = Math.max(0, claimedNum - myCount);

            if (needed > unknownDice) return [0, myCount];

            const p = claimedValue !== 1 ? 2/6 : 1/6;
            let probability = 0;

            for (let k = needed; k <= unknownDice; k++) {
                probability += binomial(unknownDice, k, p);
            }

            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É 0 –∏ 1
            probability = Math.max(0, Math.min(1, probability));
            
            return [probability, myCount];
        }

        function binomial(n, k, p) {
            if (k < 0 || k > n) return 0;
            return comb(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
        }

        function comb(n, k) {
            if (k < 0 || k > n) return 0;
            if (k === 0 || k === n) return 1;
            k = Math.min(k, n - k); // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            let res = 1;
            for (let i = 1; i <= k; i++) {
                res *= (n - k + i) / i;
            }
            return res;
        }
    </script>
</body>
</html>